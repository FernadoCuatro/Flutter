// holamundo
void main() {
  // void != null
  print('Hola mundo');
}

// tipos de datos - Numeros y String
void main() {
  // variables
  
  // string 
  String nombre = 'Fernando';
  final String apellido = 'Stark'; // es como crear una constante 
  const apellido2 = 'Parker'; // significa que su valor nunca cambiará en tiempo de compilación 
  
  nombre = 'Peter';
  // esto tambien se conoce como un template string
  print('$nombre $apellido');
  
  // numeros
  int empleados = 10; // sin decimales 
  double salario = 1233.34; // ya te la sabes
   
  print(empleados);
  print(salario); 
}

// valores bool y condiciones
void main() {
  // boleah, true, false o null
  bool isActive = true;
  // bool? isActive = true; para decirle que active puede tener valores nulos
  
  // if(isActive == null) para validar un valor nulo
  if(isActive) {
    print('Está activo');
  } else {
    print('off');
  }
  
}

// el tipo de dato lista 
void main() {
  // tipo de datos lista
  // basicamente es un arreglo
  // con el <int> se le especifica el tipo de dato que esta interno
  List<int> numeros = [1,2,3,4,5,6,7,8,9,10];
  // métodos - funciones para agregar a los datos
  numeros.add(11);
  // numeros.add('12');
  
  print(numeros);
  
  // las listas son en base a Cero, es decir empiezan desde cero
  print(numeros[0]);
  
  // dynamic es un tipo especial de dato aguanta con todo
  // hay que tratar que los tipos de datos estén bien definidos
  
  // métodos estáticos interesanes
  final masNumeros = List.generate(100, (int index) => index);
  print(masNumeros);
}

// tipo de dato Map
void main() {
  // tipo de datos mapas
  // en otros lengujes se conocen como objetos literales, diccionarios
  
  // definimos objeto
  // Map persona = {
  //   'nombre': 'Fernando',
  //   'edad': 22,
  //   'soltero': false,
  //   true: false,
  //   1: 100,
  //   2: 500
  // };

  // accedemos
  // print( persona['nombre'] );
  // print( persona[true] );
  // print( persona[2] );
  
  // podemos definir como luce este mapa
  // en el primer string obligamos a que todas las llaves sean de tipos String
  // y con el segundo estamos diciendo que los valores también tienen que ser tipo string
  // dynamic es el pivote para que tome cualquier tipo de dato
  Map<String, dynamic> persona = {
    'nombre': 'Fernando',
    'edad': '22',
    'soltero': false
  };
  
  // adding element new
  persona.addAll({ 'Segundo nombre': 'Juan' });
  
  print( persona );
  
}

// manejando las funciones
void main() {
  // función es el bloque que podemos reutilizar 
  // saludar( 'Fernando', 'No se te hace mucho texto?' );
  
  // puedo decirle que tipo de dato es el que estoy mandndo
  // no precisamente en el orden que los recibe la función 
  saludar2(mensaje: 'Mucho texto', nombre: 'Fernando');
}

// la función siemore es bueno especificar si regresa algo o no
// la vieja confiable es void

// nombre es un parámetro posicional o obligatorio

// para mandar elementos opciones podemos usar las [] para decirle que si no manda nada el valor es el que esta por defecto
void saludar(String nombre, [String mensaje = 'Todo bien?']) {
  print('Hola, como andas $nombre, $mensaje');
}

// si no quiero obligar el orden de los argumentos
// puedo espedificar con los {}
// con el simbolo ? le estamos diciendo que puede ser opcional
void saludar2({ String nombre = 'Usuario', String? mensaje }) {
  print('Estoy aquí otra vez, $nombre y ya te la sabes: $mensaje');
}

// le podemos decir que para utilizar nuestra funcion los argumentos
// para los parámetros sean obligatorios cuando agregajos la palabra: required
// void saludar2({ 
//   required String nombre, 
//   required String mensaje 
//   }) {
//   print('Estoy aquí otra vez, $nombre y ya te la sabes: $mensaje');
// }

void main() {
  // creamos el objeto con la instancia de la clase
  final Heroe wolverine = new Heroe('Logan', 'Regeneracion');
  
  // wolverine.nombre = 'Logan';
  // wolverine.poder = 'Regeneracion';
  
  print( wolverine );
  // print( wolverine.nombre );
}

// creamos una clase
class Heroe {
  // puede contener (lo comun):
  // metodos
  // propiedades
  // constructor
  
  // propiedad
  // ? == puede ser nulo
  String nombre;
  String poder;
  
  // vamos al constructor
  // Heroe( String nombre, String poder ) {
  //   this.nombre = nombre;
  //   this.poder = poder;
  // }
  
  // la forma corta es:
  Heroe( this.nombre, this.poder );
  // también podemos mandar argumentos por nombre con {}
  // y decirle que siempre nos los tiene que mandar
  // Heroe({
  //  required this.nombre, 
  //  required this.poder 
  // });
  
  // para cuando escribimos el objeto queremos que deje de decir Instancia de
  // podemos sobreescribir
  @override
  String toString() {
    // para transformar a string una instancia de mi clase 
    return 'Heroe: ${ this.nombre }, con el poder: ${ this.poder }';
  }
  
}

// cosntructores con nombre
void main() {
  final rawJson = {
    'nombre': 'Stark',
    'poder': 'Dinero'
  };
  
  final ironman = Heroe.fromJSON( rawJson );
  print(ironman);
  
  // creamos el objeto con la instancia de la clase
  // final Heroe wolverine = Heroe(nombre:'Logan', poder:'Regeneracion');
  // print( wolverine );
}

// creamos una clase
class Heroe {
  String nombre;
  String poder;
   
  Heroe({
   required this.nombre, 
   required this.poder 
  });
  
  // cosntructores por nombre
  Heroe.fromJSON(Map<String, String> json):
    this.nombre = json['nombre'] ?? 'No hay nombre',
    this.poder = json['poder'] ?? 'No tiene poder';

  
  @override
  String toString() {
    // para transformar a string una instancia de mi clase 
    return 'Heroe: ${ this.nombre }, con el poder: ${ this.poder }';
  }
}

// getter y setter
// importaciones
import 'dart:math' as math;

void main() {
  final cuadrado = Cuadrado(5);
 
  cuadrado.area = 10;
  
  print('Área: ${cuadrado.calculaArea()}');
  print('Lado: ${cuadrado.lado}');
  print('área get: ${cuadrado.area}');
  
  
}

class Cuadrado {
  double lado = 0; // lado * lado
  
  // getter es un método pero se llama como una propiedad
  // un método lleva parentesis un getter no
  double get area {
    return this.lado * this.lado;
  }
  
  // set para establecer un valor
  void set area(double valor) {
    this.lado = math.sqrt(valor);
  } 
  
  Cuadrado(double lado):
  this.lado = lado;
  
  double calculaArea() {
    return this.lado * this.lado;
  }
}







